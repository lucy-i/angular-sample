{"version":3,"sources":["ng://@enterprise/utils/api/lib/api.service.ts","ng://@enterprise/utils/api/lib/api.component.ts","ng://@enterprise/utils/api/lib/api.module.ts"],"names":["IDomainURLService","InjectionToken","ApiService","httpclient","domainURL","this","prototype","request","method","url","options","isAuth","actualURL","Injectable","args","providedIn","HttpClient","Inject","ApiComponent","ngOnInit","Component","selector","template","ApiModule","forRoot","domainurl","ngModule","providers","provide","useValue","NgModule","declarations","imports","exports"],"mappings":"mbAIA,IAAaA,EAAoB,IAAIC,EAAAA,eAAuB,UAE5DC,EAAA,WAEE,SAAAA,EACmBC,EAC2BC,GAD3BC,KAAAF,WAAAA,EAC2BE,KAAAD,UAAAA,SAE9CF,EAAAI,UAAAC,QAAA,SAAWC,EAA2CC,EAAaC,EAYxDC,OAIHC,EAAeP,KAAKD,UAAS,IAAIK,EACvC,OAAOJ,KAAKF,WAAWI,QAAQC,EAAQI,EAAWF,yBAvBrDG,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDALjBC,EAAAA,2CASJC,EAAAA,OAAMH,KAAA,CAACd,uJAJZ,GCNA,IAAAkB,EAAA,WAaE,SAAAA,KAKF,OAHEA,EAAAZ,UAAAa,SAAA,iCAbDC,EAAAA,UAASN,KAAA,CAAC,CACTO,SAAU,UACVC,SAAU,sFAcZJ,EAlBA,GCAAK,EAAA,WAMA,SAAAA,KAiBA,OAVSA,EAAAC,QAAP,SAAeC,GACb,MAAO,CACLC,SAAUH,EACVI,UAAW,CAACzB,EACV,CACE0B,QAAS5B,EACT6B,SAAUJ,0BAbnBK,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,aAAc,CAACb,GACfc,QAAS,GAETC,QAAS,CAACf,OAaZK,EAvBA","sourcesContent":["import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport const IDomainURLService = new InjectionToken<string>('domain');\n\n@Injectable({ providedIn: 'root' })\nexport class ApiService {\n  constructor(\n    private readonly httpclient: HttpClient,\n    @Inject(IDomainURLService) private readonly domainURL: string) { }\n\n  request<T>(method: 'post' | 'get' | 'put' | 'delete', url: string, options: {\n    body?: any;\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n  },         isAuth: boolean): Observable<T> {\n    if (isAuth) {\n      // set header\n    }\n    const actualURL = `${this.domainURL}/${url}`;\n    return this.httpclient.request(method, actualURL, options) as Observable<T>;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-api',\n  template: `\n    <p>\n      api works!\n    </p>\n  `,\n  styles: []\n})\nexport class ApiComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { ApiComponent } from './api.component';\nimport { ApiService, IDomainURLService } from './api.service';\n\n\n\n@NgModule({\n  declarations: [ApiComponent],\n  imports: [\n  ],\n  exports: [ApiComponent]\n})\nexport class ApiModule {\n  static forRoot(domainurl: string): ModuleWithProviders {\n    return {\n      ngModule: ApiModule,\n      providers: [ApiService,\n        {\n          provide: IDomainURLService,\n          useValue: domainurl\n        }]\n    };\n  }\n}\n"]}