{"version":3,"file":"enterprise-utils-api.umd.js","sources":["ng://@enterprise/utils/api/lib/api.service.ts","ng://@enterprise/utils/api/lib/api.component.ts","ng://@enterprise/utils/api/lib/api.module.ts"],"sourcesContent":["import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport const IDomainURLService = new InjectionToken<string>('domain');\n\n@Injectable({ providedIn: 'root' })\nexport class ApiService {\n  constructor(\n    private readonly httpclient: HttpClient,\n    @Inject(IDomainURLService) private readonly domainURL: string) { }\n\n  request<T>(method: 'post' | 'get' | 'put' | 'delete', url: string, options: {\n    body?: any;\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n  },         isAuth: boolean): Observable<T> {\n    if (isAuth) {\n      // set header\n    }\n    const actualURL = `${this.domainURL}/${url}`;\n    return this.httpclient.request(method, actualURL, options) as Observable<T>;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-api',\n  template: `\n    <p>\n      api works!\n    </p>\n  `,\n  styles: []\n})\nexport class ApiComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { ApiComponent } from './api.component';\nimport { ApiService, IDomainURLService } from './api.service';\n\n\n\n@NgModule({\n  declarations: [ApiComponent],\n  imports: [\n  ],\n  exports: [ApiComponent]\n})\nexport class ApiModule {\n  static forRoot(domainurl: string): ModuleWithProviders {\n    return {\n      ngModule: ApiModule,\n      providers: [ApiService,\n        {\n          provide: IDomainURLService,\n          useValue: domainurl\n        }]\n    };\n  }\n}\n"],"names":["InjectionToken","Injectable","HttpClient","Inject","Component","NgModule"],"mappings":";;;;;;;;;;;IAAA;AAIA,QAAa,iBAAiB,GAAG,IAAIA,mBAAc,CAAS,QAAQ,CAAC;AAErE;QAEE,oBACmB,UAAsB,EACK,SAAiB;YAD5C,eAAU,GAAV,UAAU,CAAY;YACK,cAAS,GAAT,SAAS,CAAQ;SAAK;;;;;;;;;QAEpE,4BAAO;;;;;;;;QAAP,UAAW,MAAyC,EAAE,GAAW,EAAE,OAYlE,EAAU,MAAe;YACxB,IAAI,MAAM,EAAE;;aAEX;;gBACK,SAAS,GAAM,IAAI,CAAC,SAAS,SAAI,GAAK;YAC5C,0BAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,GAAkB;SAC7E;;oBAxBFC,eAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;oBALzBC,eAAU;iDASdC,WAAM,SAAC,iBAAiB;;;yBAV7B;KAMA,IAyBC;;;;;;QAtBG,gCAAuC;;;;;QACvC,+BAA6D;;;;;;;;ACVjE;QAaE;SAAiB;;;;QAEjB,+BAAQ;;;QAAR;SACC;;oBAdFC,cAAS,SAAC;wBACT,QAAQ,EAAE,SAAS;wBACnB,QAAQ,EAAE,2CAIT;qBAEF;;;;QAQD,mBAAC;KAhBD;;;;;;;ACFA;QAMA;SAiBC;;;;;QAVQ,iBAAO;;;;QAAd,UAAe,SAAiB;YAC9B,OAAO;gBACL,QAAQ,EAAE,SAAS;gBACnB,SAAS,EAAE,CAAC,UAAU;oBACpB;wBACE,OAAO,EAAE,iBAAiB;wBAC1B,QAAQ,EAAE,SAAS;qBACpB,CAAC;aACL,CAAC;SACH;;oBAhBFC,aAAQ,SAAC;wBACR,YAAY,EAAE,CAAC,YAAY,CAAC;wBAC5B,OAAO,EAAE,EACR;wBACD,OAAO,EAAE,CAAC,YAAY,CAAC;qBACxB;;QAYD,gBAAC;KAjBD;;;;;;;;;;;;;;;"}