{"version":3,"file":"enterprise-utils-api.js","sources":["ng://@enterprise/utils/api/lib/api.service.ts","ng://@enterprise/utils/api/lib/api.component.ts","ng://@enterprise/utils/api/lib/api.module.ts"],"sourcesContent":["import { Injectable, InjectionToken, Inject } from '@angular/core';\nimport { HttpClient, HttpParams, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nexport const IDomainURLService = new InjectionToken<string>('domain');\n\n@Injectable({ providedIn: 'root' })\nexport class ApiService {\n  constructor(\n    private readonly httpclient: HttpClient,\n    @Inject(IDomainURLService) private readonly domainURL: string) { }\n\n  request<T>(method: 'post' | 'get' | 'put' | 'delete', url: string, options: {\n    body?: any;\n    headers?: HttpHeaders | {\n      [header: string]: string | string[];\n    };\n    observe?: 'body';\n    params?: HttpParams | {\n      [param: string]: string | string[];\n    };\n    reportProgress?: boolean;\n    responseType: 'arraybuffer' | 'blob' | 'json' | 'text';\n    withCredentials?: boolean;\n  },         isAuth: boolean): Observable<T> {\n    if (isAuth) {\n      // set header\n    }\n    const actualURL = `${this.domainURL}/${url}`;\n    return this.httpclient.request(method, actualURL, options) as Observable<T>;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-api',\n  template: `\n    <p>\n      api works!\n    </p>\n  `,\n  styles: []\n})\nexport class ApiComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { ApiComponent } from './api.component';\nimport { ApiService, IDomainURLService } from './api.service';\n\n\n\n@NgModule({\n  declarations: [ApiComponent],\n  imports: [\n  ],\n  exports: [ApiComponent]\n})\nexport class ApiModule {\n  static forRoot(domainurl: string): ModuleWithProviders {\n    return {\n      ngModule: ApiModule,\n      providers: [ApiService,\n        {\n          provide: IDomainURLService,\n          useValue: domainurl\n        }]\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAAA;AAIA,MAAa,iBAAiB,GAAG,IAAI,cAAc,CAAS,QAAQ,CAAC;AAGrE,MAAa,UAAU;;;;;IACrB,YACmB,UAAsB,EACK,SAAiB;QAD5C,eAAU,GAAV,UAAU,CAAY;QACK,cAAS,GAAT,SAAS,CAAQ;KAAK;;;;;;;;;IAEpE,OAAO,CAAI,MAAyC,EAAE,GAAW,EAAE,OAYlE,EAAU,MAAe;QACxB,IAAI,MAAM,EAAE;;SAEX;;cACK,SAAS,GAAG,GAAG,IAAI,CAAC,SAAS,IAAI,GAAG,EAAE;QAC5C,0BAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC,GAAkB;KAC7E;;;YAxBF,UAAU,SAAC,EAAE,UAAU,EAAE,MAAM,EAAE;;;;YALzB,UAAU;yCASd,MAAM,SAAC,iBAAiB;;;;;;;;IADzB,gCAAuC;;;;;IACvC,+BAA6D;;;;;;;;ACVjE,MAWa,YAAY;IAEvB,iBAAiB;;;;IAEjB,QAAQ;KACP;;;YAdF,SAAS,SAAC;gBACT,QAAQ,EAAE,SAAS;gBACnB,QAAQ,EAAE;;;;GAIT;aAEF;;;;;;;;;;ACVD,MAYa,SAAS;;;;;IACpB,OAAO,OAAO,CAAC,SAAiB;QAC9B,OAAO;YACL,QAAQ,EAAE,SAAS;YACnB,SAAS,EAAE,CAAC,UAAU;gBACpB;oBACE,OAAO,EAAE,iBAAiB;oBAC1B,QAAQ,EAAE,SAAS;iBACpB,CAAC;SACL,CAAC;KACH;;;YAhBF,QAAQ,SAAC;gBACR,YAAY,EAAE,CAAC,YAAY,CAAC;gBAC5B,OAAO,EAAE,EACR;gBACD,OAAO,EAAE,CAAC,YAAY,CAAC;aACxB;;;;;;;;;;;;;;;;;"}